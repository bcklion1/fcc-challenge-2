{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["renderer","code","snippet","lang","react_default","a","createElement","default_highlight","language","style","atomDark","placeholder","Preview","props","class","id","marked_react","value","prevText","App","_useState","useState","_useState2","Object","slicedToArray","text","setText","onChange","e","target","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"sQAMMA,EAAW,CACfC,KADe,SACVC,EAASC,GACZ,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAmBC,SAAS,aAAaC,MAAOC,KAAWR,KAIhES,EAAW,4pCA0Df,SAASC,EAAQC,GAEf,OACET,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,sCACTV,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,2BAAX,WACAV,EAAAC,EAAAC,cAAA,OAAKS,GAAG,UAAUD,MAAM,aACtBV,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAUF,MAAM,WAAWG,MAAOJ,EAAMK,SAAUlB,SAAUA,MAKvDmB,MAvBf,WAAe,IAAAC,EACUC,mBAASV,GADnBW,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACDI,EADCJ,EAAA,GAEb,OACElB,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,iCACXV,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,qCACTV,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,2BAAX,UACEV,EAAAC,EAAAC,cAAA,YAAUS,GAAG,SAASE,MAAOQ,EAAME,SAAU,SAAAC,GAAC,OAAIF,EAAQE,EAAEC,OAAOZ,QAAQH,MAAM,eAErFV,EAAAC,EAAAC,cAACM,EAAD,CAASM,SAAUO,MCtDRK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAL,EAAA,GAAAM,KAAAD,EAAAE,KAAA,WAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH1C,EAAAC,EAAAC,cAACF,EAAAC,EAAM0C,WAAP,KACE3C,EAAAC,EAAAC,cAAC0C,EAAD,QAOJlB","file":"static/js/main.ec108348.chunk.js","sourcesContent":["import './App.css';\nimport React,{useState} from \"react\";\nimport Markdown from 'marked-react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomDark } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nconst renderer = {\n  code(snippet, lang) {\n    return <SyntaxHighlighter language=\"javascript\" style={atomDark}>{snippet}</SyntaxHighlighter>;\n  },\n};\n\nconst placeholder = `\n# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHere's some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.org), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\n`;\n\nfunction App() {\n  const [text,setText] = useState(placeholder)\n  return (\n    <div class=\"background flex-column center\">\n    <div class=\"flex-column center wrapper editor\">\n      <div class=\"editor-label title-text\">Editor</div>\n        <textarea id=\"editor\" value={text} onChange={e => setText(e.target.value)} class=\"text-area\"></textarea>\n    </div>\n    <Preview prevText={text}/>\n    </div>\n  )}\n\n  function Preview(props){\n    \n    return(\n      <div class=\"flex-column center wrapper preview\">\n        <div class=\"editor-label title-text\">Preview</div>\n        <div id=\"preview\" class=\"text-area\">\n          <Markdown class=\"max-size\" value={props.prevText} renderer={renderer}></Markdown>\n        </div>\n    </div>\n    )\n  }\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}